/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
}

description = 'Frequent Pattern Mining :: Neo4J with Pregel'

ext {
    gdsVersion = '2.4.0'
    neo4jVersion = '5.8.0'
    immutablesVersion = '2.8.1'
    jetbrainsAnnotations = '18.0.0'
    junit5Version = '5.7.1'
}

version '1.0.1'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

dependencies {
    // We depend on the proc artifact of the GDS library
    compileOnly "org.neo4j.gds:proc:$gdsVersion"
    compileOnly "org.neo4j.gds:core:$gdsVersion"
    compileOnly "org.neo4j.gds:algo-common:$gdsVersion"
    compileOnly "org.neo4j.gds:executor:$gdsVersion"
    compileOnly "org.neo4j.gds:memory-usage:$gdsVersion"
    compileOnly "org.neo4j.gds:annotations:$gdsVersion"
    compileOnly "org.neo4j.gds:proc-pregel:$gdsVersion"
    compileOnly "org.neo4j.gds:config-api:$gdsVersion"
    compileOnly "org.neo4j.gds:progress-tracking:$gdsVersion"
    compileOnly "org.neo4j.gds:transaction:$gdsVersion"

    // We also need to depend on Neo4j itself for our tests.
    // Usually, Neo4j is available when we are running as a plugin.
    compileOnly "org.neo4j:neo4j:$neo4jVersion"

    // We need an annotation processor for our K1 configuration
    annotationProcessor "org.immutables:value:$immutablesVersion"
    annotationProcessor "org.neo4j.gds:config-generator:$gdsVersion"
    annotationProcessor "org.neo4j.gds:pregel-proc-generator:$gdsVersion"
    compileOnly         "org.jetbrains:annotations:$jetbrainsAnnotations"
    compileOnly         "org.immutables:value-annotations:$immutablesVersion"

    // We need an annotation processor for our test configurations
    testAnnotationProcessor "org.neo4j.gds:config-generator:$gdsVersion"

    // We need to provide GDS for the test as well, along with some test helpers
    testImplementation "org.neo4j.gds:test-utils:$gdsVersion"
    testImplementation "org.neo4j.gds:proc:$gdsVersion"
    testImplementation "org.neo4j.gds:core:$gdsVersion"
    testImplementation "org.neo4j.gds:proc-pregel:$gdsVersion"
    testImplementation "org.neo4j.gds:config-api:$gdsVersion"
    testImplementation "org.neo4j.gds:progress-tracking:$gdsVersion"

    // Use JUnit Jupiter API for testing.
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"



    // // Use JUnit Jupiter for testing.
    // testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // // This dependency is used by the application.
    // implementation 'com.google.guava:guava:31.1-jre'
    
    // compileOnly "org.neo4j:neo4j:$neo4jVersion"

    // compileOnly "org.neo4j.gds:proc:$gdsVersion"
    // compileOnly "org.neo4j.gds:core:$gdsVersion"
    // compileOnly "org.neo4j.gds:algo-common:$gdsVersion"
    // compileOnly "org.neo4j.gds:executor:$gdsVersion"
    // compileOnly "org.neo4j.gds:memory-usage:$gdsVersion"
    // compileOnly "org.neo4j.gds:annotations:$gdsVersion"
    // compileOnly "org.neo4j.gds:proc-pregel:$gdsVersion"
    // compileOnly "org.neo4j.gds:config-api:$gdsVersion"

    // // We need an annotation processor for our K1 configuration
    // annotationProcessor "org.immutables:value:$immutablesVersion"
    // annotationProcessor "org.neo4j.gds:config-generator:$gdsVersion"
    // annotationProcessor "org.neo4j.gds:pregel-proc-generator:$gdsVersion"
    // compileOnly         "org.jetbrains:annotations:$jetbrainsAnnotations"
    // compileOnly         "org.immutables:value-annotations:$immutablesVersion"

    // // We need an annotation processor for our test configurations
    // testAnnotationProcessor "org.neo4j.gds:config-generator:$gdsVersion"

    // // We need to provide GDS for the test as well, along with some test helpers
    // testImplementation "org.neo4j.gds:test-utils:$gdsVersion"
    // testImplementation "org.neo4j.gds:proc:$gdsVersion"
    // testImplementation "org.neo4j.gds:core:$gdsVersion"
    // testImplementation "org.neo4j.gds:proc-pregel:$gdsVersion"
    // testImplementation "org.neo4j.gds:config-api:$gdsVersion"
    // testImplementation "org.neo4j.gds:progress-tracking:$gdsVersion"

    // // implementation "org.neo4j.gds:core:$gdsVersion"
    // // implementation 'org.neo4j.graphalgo:graph-data-science:1.7.0'
    // testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
    // testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.neo4j.pregel.PageRankPregel'
}

// tasks.named('test') {
test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    // Since JDK 17 the default access to the following
    // packages is "deny". We need to open them in order
    // to gain access in GDS / Neo4j.
    jvmArgs += '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs += '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED'
    jvmArgs += '--add-opens=java.base/java.nio=ALL-UNNAMED'
    jvmArgs += '--add-opens=java.base/java.util.stream=ALL-UNNAMED'
    jvmArgs += '--add-opens=java.base/sun.net.www.protocol.http=ALL-UNNAMED'
    jvmArgs += '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED'

}

shadowJar {
    exclude 'META-INF/versions/**/*'
    archiveBaseName.set('graph-frequent-pattern')  // set the base name of your jar file
    archiveVersion.set(version)  // set the version of your jar file
    archiveClassifier.set('')  // remove the 'all' suffix
}
